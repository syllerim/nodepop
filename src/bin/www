#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('src:server');
const https = require('https');
const configs = require('../configs');
const cluster = require('cluster');

// Get port from environment and store in Express.
app.set('port', configs.http.port);

// Require db mongoose connection
require('../../db/connectMongoose');

/**
 * Allow Https
 */
const fs = require('fs');

const options = {
  key: fs.readFileSync('certificates/host.key'),
  cert: fs.readFileSync('certificates/host.cert'),
  rejectUnauthorized: false
};

// Create cluster
if (cluster.isMaster) {
  const numCPUs = require('os').cpus().length;

  cluster.on('listening', (worker, address) => {
    if (configs.logs.enabled) {
      console.log(`Worker ${worker.id} con PID ${worker.process.pid} connectado a puerto ${address.port}`);
    }
  });

  cluster.on('exit', (worker, code, signal) => {
    if (configs.logs.enabled) {
      console.log(`Worker ${worker.process.pid} ha muerto con code ${code} y se√±al ${signal}`);
    }

    cluster.fork();
  });


  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }
} else { // soy un clon
/**
 * Create HTTP server.
 */

  const server = https.createServer(options, app);
  /**
 * Listen on provided port, on all network interfaces.
 */

  server.listen(configs.http.port);
  server.on('error', onError);
  server.on('listening', () => {
    const addr = server.address();
    const bind = typeof addr === 'string'
      ? `pipe ${addr}`
      : `port ${addr.port}`;
    debug(`Listening on ${bind}`);
  });
}


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${configs.http.port}`
    : `Port ${configs.http.port}`;

    // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

